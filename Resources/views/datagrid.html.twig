{# start: Main datagrid body #}
{% block datagrid_body %}
    {% set route_name   = app.request.get('_route') %}
    {% set route_params = app.request.get('_route_params') %}
    {% set attributes   = datagrid.getGridBuilder().getAttributes() %}

    {% if attributes.isVisibleFiltersType() %}
    {{ block('datagrid_filters_type') }}
    {% endif %}

    {{ block('datagrid_table') }}

    {% set from = (datagrid.pagination.getPage()-1)*datagrid.pagination.getLimit() %}
    {% set from = from < 1 ? 1 : from+1 %}
    {% set to   = from+datagrid.pagination.getLimit()-1 %}

    {% if attributes.isVisibleResultsInfo() %}
    <p>{{ block('datagrid_result_info') }}</p>
    {% endif %}

    {{ block('datagrid_pagination') }}
{% endblock datagrid_body %}
{# end: Main datagrid body #}

{# start: datagrid_pagination #}
{% block datagrid_pagination %}
    {% include '@TuttoDataGrid/pagination.html.twig' with {'pagination': datagrid.pagination, 'router': datagrid.router} %}
{% endblock datagrid_pagination %}
{# start: datagrid_pagination #}

{# start: Datagrid results info (f.e: Show 1 of 30 rekords) #}
{% block datagrid_result_info %}
    {{ "datagrid.show_result"|trans({"%from%": from, "%to%": to, "%count%": datagrid.pagination.count()}) }}
{% endblock datagrid_result_info %}
{# end: Datagrid results info (f.e: Show 1 of 30 rekords) #}

{# start: Datagrid filters type (Form to search results) #}
{% block datagrid_filters_type %}
    <form method="post" action="{{ path(route_name, route_params|merge({'_page': 1})) }}">
        {{ form_widget(datagrid.form) }}
    </form>
{% endblock datagrid_filters_type %}
{# end: Datagrid filters type (Form to search results) #}

{# start: Build table with contents #}
{% block datagrid_table %}
    {% set labels_mode = attributes.getTableLabelsMode() %}
    {% set show_labels = attributes.isVisibleTableLabels() %}

    <table class="{{ datagrid.getGridBuilder().getAttributes().getClass()|join(' ') }}">
        {% if show_labels and (labels_mode == 1 or labels_mode == 3) %}
        <thead>
        <tr>{{ block('datagrid_table_labels') }}</tr>
        </thead>
        {% endif %}
        <tbody>{{ block('datagrid_table_results') }}</tbody>
        {% if show_labels and (labels_mode == 2 or labels_mode == 3) %}
        <tfoot>
        <tr>{{ block('datagrid_table_labels') }}</tr>
        </tfoot>
        {% endif %}
    </table>
{% endblock datagrid_table %}
{# end: Build table with contents #}

{# start: Build rows with results (columns) #}
{% block datagrid_table_results %}
    {% for row in datagrid.getRows() %}
        <tr>
            {% for cell in row.getCells() %}
                <td {{ cell.getColumn().getAttributes()|raw }}>
                    {{ block('datagrid_table_single_result') }}
                </td>
            {% endfor %}
        </tr>
    {% endfor %}
{% endblock datagrid_table_results %}
{# end: Build rows with results (columns) #}

{# start: Build single results #}
{% block datagrid_table_single_result %}
    {% set col = cell.getColumn() %}

    {% if col.isVisible() %}
        {% set xhtml = xhtmlRaw(cell.getXhtml()) %}
        {% if col.isTranslate() %}
            {{ xhtml|trans(col.getTranslationParams, col.getTranslationDomain())|raw }}
        {% else %}
            {{ xhtml|raw }}
        {% endif %}
    {% endif %}
{% endblock datagrid_table_single_result %}
{# end: Build single results #}

{# start: Build rows with labels #}
{% block datagrid_table_labels %}
    {% for column in datagrid.getColumns() %}
        <th {{ column.getAttributes()|raw }}>
            {% if column.isVisible() %}
                {% if column.isSortable() %}
                    <a href="{{ datagrid.router.generate({"_sort": column.getSort()}) }}">
                        {{ column.getLabel()|trans({}, column.translationDomain)|raw }}
                    </a>
                {% else %}
                    {{ column.getLabel()|trans({}, column.translationDomain)|raw }}
                {% endif %}
            {% endif %}
        </th>
    {% endfor %}
{% endblock datagrid_table_labels %}
{# end: Build rows with labels #}